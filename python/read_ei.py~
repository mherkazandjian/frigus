# -*- coding: utf-8 -*-
"""
Created on Wed Jan 28 01:51:39 2015

@author: carla
"""

import numpy
from numpy import loadtxt, genfromtxt, arange, int32, zeros
import pylab
from IPython.core.debugger import Tracer



def read_einstein(fname):
    '''parse the data by Simbotin:

  0   j''=j'
                  14              13              12              11              10               9         .....     1
    1    0   0.6094641D-13   0.1367911D-12   0.1860857D-12   0.1826816D-12   0.9029585D-13   0.8476571D-14   .....
    '''

    #defining the greatest rotational number for H2
    jmax = 31

    # read the data from the original ascii file

    data_read = loadtxt(fname, unpack=True, skiprows=2)

    (v, j), A = int32(data_read[0:1]), data_read[1:]

#    # declare the array where the data will be stored
#    nv, nj, nvp, njp = v.max()+1, j.max()+1, vp.max()+1, jp.max()+1
#    data = zeros((int(nv), int(nj), int(nvp), int(njp), cr.shape[0]), 'f8')

#    # copy the read data into the container array
#    for i, cri in enumerate(cr.T):
#        data[v[i], j[i], vp[i], jp[i], :] = cri

#    return data, T


data = read_coeff('Read/j2j')

#print 'done'


      # open(1,file='j2j')
      # read(1,*)k
      # do j=1,jmax-1
      #    read(1,*)(ii,i=ivmax(j),1,-1)
      #    do ivf=0,ivmax(j)-1
      #       read(1,*)jj,ii,(a(0,ivf,i,j),i=ivmax(j),ivf+1,-1)
      #    enddo
      # enddo
      # close(1)
